{"version":3,"sources":["../src/index.js"],"names":["app","server","createServer","use","exposedHeaders","corsHeaders","json","limit","bodyLimit","req","res","next","send","config","db","listen","process","env","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEA;AACAA,IAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAH,IAAIG,GAAJ,CAAQ,oBAAK;AACZC,iBAAgB,iBAAOC;AADX,CAAL,CAAR;;AAIAL,IAAIG,GAAJ,CAAQ,qBAAWG,IAAX,CAAgB;AACvBC,QAAQ,iBAAOC;AADQ,CAAhB,CAAR;;AAIAR,IAAIG,GAAJ,CAAQ,GAAR,EAAa,UAACM,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChCD,KAAIE,IAAJ,CAAS,MAAT;AACA,CAFD;;AAIA;AACA,kBAAc,cAAM;;AAEnB;AACAZ,KAAIG,GAAJ,CAAQ,0BAAW,EAAEU,wBAAF,EAAUC,MAAV,EAAX,CAAR;;AAEA;AACAd,KAAIG,GAAJ,CAAQ,MAAR,EAAgB,mBAAI,EAAEU,wBAAF,EAAUC,MAAV,EAAJ,CAAhB;;AAEA;AACA;;AAEA;AACA;;AAEAd,KAAIC,MAAJ,CAAWc,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,iBAAOC,IAA7C,EAAmD,YAAM;AACxDC,UAAQC,GAAR,sBAA+BrB,IAAIC,MAAJ,CAAWqB,OAAX,GAAqBH,IAApD;AACA,EAFD;AAGA,CAjBD;;kBAmBenB,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport initializeDb from './db';\nimport middleware from './middleware';\nimport api from './api';\nimport config from './config.json';\n\nlet app = express();\napp.server = http.createServer(app);\n\n// logger\napp.use(morgan('dev'));\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: config.corsHeaders\n}));\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit\n}));\n\napp.use('/', (req, res, next) => {\n\tres.send('root');\n})\n\n// connect to db\ninitializeDb( db => {\n\n\t// internal middleware\n\tapp.use(middleware({ config, db }));\n\n\t// api router\n\tapp.use('/api', api({ config, db }));\n\n\t// api router v1 hypothetical\n\t// app.use('/api/v1', api({ config, db }));\n\n\t// cms router hypothetical\n\t// app.use('/cms', api({ config, db }));\n\n\tapp.server.listen(process.env.PORT || config.port, () => {\n\t\tconsole.log(`Started on port ${app.server.address().port}`);\n\t});\n});\n\nexport default app;\n"]}